---
title: "Introduction to KDoc"
categories: ["Kotlin"]
date: 2023-09-07 00:00:00 +1100 
authors: [ezra]
excerpt: "In this tutorial, we'll discuss KDoc which is a documentation langunage for Kotlin code."
image: images/stock/0104-on-off-1200x628-branded.jpg
url: introduction-to-kDoc
---

In this tutorial, we'll discuss all that entails <em>KDoc</em> in Kotlin. [KDoc](https://kotlinlang.org/docs/kotlin-doc.html#links-to-elements) is simply language used to document code written using Kotlin specifically. KDoc allows us to provide documentation comments for classes, functions, properties and other elements in our code. It's the same as <em>Javadoc</em> which is used to document JAVA language. Essentially, <em>KDoc</em> combines syntax in <em>Javadoc </em>for the block tags and markdown for inline markup.
## 2. KDoc Syntax</h2>
Same as <em>javadoc, </em>KDoc comments usually start with /** and end with */.

Let’s see an example of KDoc:
```groovy
/**
 * Calculates the sum of two numbers.
 *
 * @param a The first number.
 * @param b The second number.
 * @return The sum of the two numbers.
 */
fun sum(a: Int, b: Int): Int {
    return a + b
}
```
KDoc in our example is written above our <em>sum</em> function. In this case, KDoc explains what task our function performs and also documents the parameters <em>a</em> and <em>b</em> which the function takes inclusive of the expected return value.
## 3. Tags Supported by Kdoc
Tags that are supported by KDoc are grouped into two categories:
<ul>
 	<li>Block tags</li>
 	<li>Inline markup</li>
</ul>
## 4. Block Tags
Block tags are used to provide documentation for larger sections of code or to describe multi-line content within KDoc.They are usually placed on separate lines.

These are the block tags supported by KDoc:

**@param name**:This tag is used to document a value parameter of a function.

**@return**: Used to document the return value of a function.

**@constructor**: Used to document the primary constructor of a class.

**@receiver**: Documents the receiver of an extension function.

**@property name**: This tag is used to document the property of a class that has the specified name.

**@throws class,@exception class**: Used to document exceptions that can be thrown by a method.

**@sample identifier**:Used to embed the body of a function that has the specified qualified name into the documentation for the current element so as to show an example of how the particular element can be put into use.

**@see identifier**: Used to add a link to a specific class or method.

**@author**: Used to specify the author of the element that is being documented.

**@since**:Used to specify the version of the software in which the element under documentation was introduced.

**KDoc does not support the <code class="code ">@deprecated</code> tag. Instead, please use the <code class="code ">@Deprecated</code> annotation.**
## 5. Inline Markup
Inline markup tags in KDoc are used to provide brief, inline documentation within a single line of the KDoc comment.

These tags include:

**@code**: This tag is used to format code snippets or even reference code elements. An example of this tag in our code would be:
```groovy
/**
 * This function calculates the sum of two numbers.
 *
 * @param a The first number.
 * @param b The second number.
 * @return The sum of [a] and [b].
 *
 * Usage example:
 * ```
 * val result = add(5, 3)
 * println("The result is: $result")
 * ```
 */
fun add(a: Int, b: Int): Int {
    return a + b
}
```
The **@code** tag is used to format the code snippet that demonstrates how to use the *add* function.


**@link**: This tag is used to create a hyperlink to another code element. Example of this tag in our codebase would look like this:
```groovy
/**
 * This class represents a [Person] in the system.
 *
 * @property name The name of the person.
 * @property age The age of the person.
 */
data class Person(val name: String, val age: Int)

/**
 * This function finds and returns a [Person] by their name.
 *
 * @param name The name to search for.
 * @return The [Person] object with the specified [name], or `null` if not found.
 */
fun findPersonByName(name: String): Person? {
    // Implementation here...
}
```
The **@link** tag is used to create hyperlinks to the *Person* class and the [Person] type within the documentation comments.

## 6. Conclusion
In this article, we discussed KDoc which is the documentation language for Kotlin code. We also went through the KDOc's syntax and the various tags it supports.